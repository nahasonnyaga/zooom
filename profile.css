<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Profile - Zooom</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="description" content="View user profile on Zooom.">
  <link rel="icon" href="assets/logo.png">
  <link rel="stylesheet" href="css/main.css">
  <link rel="stylesheet" href="css/navbar.css">
  <link rel="stylesheet" href="css/theme.css">
  <style>
    #profile-container {
      border: 1px solid #eee;
      padding: 2.1rem 1.3rem 1.7rem 1.3rem;
      border-radius: 18px;
      background: #fff;
      max-width: 420px;
      margin: 2.5em auto 2em auto;
      box-shadow: 0 2px 18px #0001;
      position: relative;
    }
    body.theme-dark #profile-container {
      background: #181b23;
      border: 1.5px solid #222b38;
      color: #f3f4fb;
      box-shadow: 0 2px 18px #19203333;
    }
    .profile-header {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 0.6em;
      margin-bottom: 1.3em;
    }
    .profile-avatar {
      width: 90px;
      height: 90px;
      border-radius: 50%;
      object-fit: cover;
      border: 2.5px solid #2563eb22;
      background: #f3f4fb;
      margin-bottom: 0.5em;
      box-shadow: 0 2px 12px #2563eb13;
    }
    .profile-displayname {
      font-size: 1.43em;
      font-weight: 800;
      letter-spacing: -0.02em;
      color: #222;
    }
    body.theme-dark .profile-displayname { color: #e3e9fa; }
    .profile-username {
      color: #2563eb;
      font-size: 1.08em;
      margin-bottom: 0.2em;
      font-weight: 600;
    }
    .profile-bio {
      text-align: center;
      color: #666;
      font-size: 1.07em;
      margin-bottom: 0.5em;
      min-height: 1.8em;
    }
    .profile-meta {
      color: #888;
      font-size: 0.98em;
      margin-bottom: 0.4em;
      text-align: center;
    }
    .profile-links {
      display: flex;
      justify-content: center;
      gap: 0.7em;
      margin-bottom: 0.4em;
    }
    .profile-links a {
      color: #2563eb;
      font-size: 1.22em;
      background: #f3f7ff;
      border-radius: 50%;
      padding: 5px;
      transition: background 0.17s;
      text-decoration: none;
      display: flex;
    }
    .profile-links a:hover {
      background: #e0e7ff;
    }
    .profile-stats {
      display: flex;
      justify-content: center;
      gap: 2em;
      margin: 1.1em 0 0.8em 0;
    }
    .profile-stat {
      color: #222;
      font-weight: 600;
      font-size: 1.09em;
      text-align: center;
    }
    body.theme-dark .profile-stat { color: #e3e9fa; }
    .profile-actions {
      display: flex;
      gap: 0.8em;
      justify-content: center;
      margin-bottom: 1.1em;
    }
    .profile-btn {
      background: linear-gradient(90deg, #2563eb 65%, #60a5fa 100%);
      color: #fff;
      border: none;
      border-radius: 14px;
      font-weight: 700;
      font-size: 1em;
      padding: 0.5em 1.6em;
      cursor: pointer;
      transition: background 0.18s;
      box-shadow: 0 1px 9px #2563eb10;
      letter-spacing: 0.1px;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 0.5em;
    }
    .profile-btn.outline {
      background: #fff;
      color: #2563eb;
      border: 1.4px solid #2563eb;
      box-shadow: none;
    }
    body.theme-dark .profile-btn.outline {
      background: #21273a;
      color: #6ca6ff;
      border: 1.4px solid #6ca6ff;
    }
    .profile-btn:active { background: #2563eb; }
    .profile-actions .profile-btn:disabled { opacity: 0.6; cursor: not-allowed; }
    .profile-posts-header {
      font-weight: 700;
      font-size: 1.16em;
      margin: 2em 0 0.6em 0;
      color: #2b2b2b;
      border-bottom: 2px solid #f1f5fa;
      padding-bottom: 0.2em;
    }
    body.theme-dark .profile-posts-header { color: #e3e9fa; border-color: #2c2f3a; }
    .profile-posts-list {
      margin-top: 0.5em;
    }
    .profile-empty {
      color: #888;
      font-size: 1.07em;
      margin: 1.5em 0 1em 0;
      text-align: center;
    }
    @media (max-width: 600px) {
      #profile-container { padding: 1em 0.1em; }
      .profile-header {gap:0.4em;}
      .profile-stats {gap: 1.1em;}
      .profile-actions {gap: 0.4em;}
    }
  </style>
</head>
<body class="theme-light">
  <div id="navbar"></div>
  <main>
    <div id="profile-container">
      <div class="profile-header">
        <img src="assets/avatar.png" id="profile-avatar" class="profile-avatar" alt="Avatar">
        <div id="profile-displayname" class="profile-displayname"></div>
        <div id="profile-username" class="profile-username"></div>
        <div id="profile-bio" class="profile-bio"></div>
        <div id="profile-meta" class="profile-meta"></div>
        <div class="profile-links" id="profile-links"></div>
      </div>
      <div class="profile-stats" id="profile-stats"></div>
      <div class="profile-actions" id="profile-actions"></div>
      <div id="profile-posts-section">
        <div class="profile-posts-header">Posts</div>
        <div id="profile-posts-list" class="profile-posts-list"></div>
      </div>
    </div>
  </main>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/js/all.min.js"></script>
  <script src="js/supabase.js"></script>
  <script src="js/theme.js"></script>
  <script>
    // Navbar, theme
    fetch('components/navbar.html').then(r => r.text()).then(html => {
      document.getElementById('navbar').innerHTML = html;
      if(window.lucide) lucide.createIcons();
    });
    if(localStorage.getItem('zooom-theme')==='dark') {
      document.body.classList.remove('theme-light');
      document.body.classList.add('theme-dark');
    }

    // Helper: get URL param "user"
    function getUserParam() {
      const params = new URLSearchParams(location.search);
      return params.get('user');
    }

    // Helper: get session user
    async function getSessionUser() {
      const { data } = await supabase.auth.getSession();
      return data.session?.user || null;
    }

    // Render profile
    async function renderProfile() {
      const username = getUserParam();
      if (!username) {
        document.getElementById('profile-container').innerHTML = `<div class="profile-empty">No user specified.</div>`;
        return;
      }
      // Fetch profile by username
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('username', username)
        .single();
      if (error || !profile) {
        document.getElementById('profile-container').innerHTML = `<div class="profile-empty">User not found.</div>`;
        return;
      }
      // Set header
      document.getElementById('profile-avatar').src = profile.avatar_url || 'assets/avatar.png';
      document.getElementById('profile-avatar').alt = profile.display_name || profile.username;
      document.getElementById('profile-displayname').textContent = profile.display_name || profile.username;
      document.getElementById('profile-username').textContent = '@' + profile.username;
      document.getElementById('profile-bio').textContent = profile.bio || '';
      document.getElementById('profile-meta').innerHTML = [
        profile.location ? `üìç ${profile.location}` : "",
        profile.website ? `<a href="${profile.website}" target="_blank" rel="noopener noreferrer" style="color:#2563eb;">${profile.website.replace(/^https?:\/\//,'')}</a>` : "",
        profile.twitter ? `<a href="https://twitter.com/${profile.twitter}" target="_blank" rel="noopener noreferrer" style="color:#2563eb;">@${profile.twitter}</a>` : ""
      ].filter(Boolean).join(' &middot; ');

      // Links
      const links = [];
      if (profile.website) links.push(`<a href="${profile.website}" target="_blank" title="Website"><i class="fa-solid fa-link"></i></a>`);
      if (profile.twitter) links.push(`<a href="https://twitter.com/${profile.twitter}" target="_blank" title="Twitter"><i class="fa-brands fa-x-twitter"></i></a>`);
      links.push(`<a href="messages.html?user=${encodeURIComponent(profile.id)}" title="Send Message"><i class="fa-regular fa-envelope"></i></a>`);
      document.getElementById('profile-links').innerHTML = links.join('');

      // Stats
      document.getElementById('profile-stats').innerHTML = `
        <div class="profile-stat"><span title="Followers">üë•</span><br><b>${profile.followers_count || 0}</b><br><span style="font-size:0.92em;color:#888;">Followers</span></div>
        <div class="profile-stat"><span title="Following">üîó</span><br><b>${profile.following_count || 0}</b><br><span style="font-size:0.92em;color:#888;">Following</span></div>
        <div class="profile-stat"><span title="Threads">üßµ</span><br><b>${profile.threads_count || 0}</b><br><span style="font-size:0.92em;color:#888;">Posts</span></div>
      `;

      // Actions: follow/unfollow, message, edit
      const sessionUser = await getSessionUser();
      const actions = [];
      if (sessionUser && sessionUser.id !== profile.id) {
        // Check if following
        let isFollowing = false;
        const { data: followData } = await supabase
          .from('follows')
          .select('id')
          .eq('follower_id', sessionUser.id)
          .eq('following_id', profile.id)
          .maybeSingle();
        isFollowing = !!(followData && followData.id);
        actions.push(`<button class="profile-btn" id="follow-btn">${isFollowing ? 'Unfollow' : 'Follow'}</button>`);
        actions.push(`<a class="profile-btn outline" href="messages.html?user=${encodeURIComponent(profile.id)}"><i class="fa-regular fa-envelope"></i> Message</a>`);
      }
      if (sessionUser && sessionUser.id === profile.id) {
        actions.push(`<a class="profile-btn outline" href="settings.html"><i class="fa-solid fa-gear"></i> Edit Profile</a>`);
      }
      document.getElementById('profile-actions').innerHTML = actions.join('');

      // Follow/unfollow action handler
      const followBtn = document.getElementById('follow-btn');
      if (followBtn) {
        followBtn.onclick = async () => {
          followBtn.disabled = true;
          if (followBtn.textContent === "Follow") {
            const { error } = await supabase.from('follows').insert({ follower_id: sessionUser.id, following_id: profile.id });
            if (!error) followBtn.textContent = "Unfollow";
          } else {
            await supabase.from('follows').delete().eq('follower_id', sessionUser.id).eq('following_id', profile.id);
            followBtn.textContent = "Follow";
          }
          followBtn.disabled = false;
        };
      }

      // Fetch posts by user
      const { data: posts } = await supabase
        .from('posts')
        .select('id, title, body, created_at, topic, media_url')
        .eq('user_id', profile.id)
        .order('created_at', { ascending: false })
        .limit(20);

      const postsList = document.getElementById('profile-posts-list');
      postsList.innerHTML = posts && posts.length
        ? posts.map(p => `
          <div class="feed-post-card" style="margin-bottom:1.1em;">
            <a href="thread.html?id=${p.id}"><b>${p.title || '(no title)'}</b></a>
            <div>${(p.body || '').substring(0, 110)}</div>
            ${p.media_url ? `<img src="${p.media_url}" style="max-width:96%;margin-top:0.6em;border-radius:13px;">` : ''}
            <div style="color:#666;font-size:0.92em;">${p.topic ? '#' + p.topic : ''} ¬∑ ${new Date(p.created_at).toLocaleString()}</div>
          </div>
        `).join('')
        : `<div class="profile-empty">No posts yet.</div>`;
    }

    document.addEventListener('DOMContentLoaded', renderProfile);
  </script>
</body>
</html>
